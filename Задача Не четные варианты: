1. Факториалы
Задача: На вход натуральное число n, на выход контейнер с первыми n факториалами.

def factorial(n: int) -> int:
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

def factorials_up_to_n(n: int):
    if n < 1:
        raise ValueError("Число n должно быть натуральным (n >= 1).")
    return [factorial(i) for i in range(1, n + 1)]



2. Удаление дубликатов из списка
Задача: На вход — контейнер (массив) с числами. На выход контейнер с неизменным списком элементов, но без дубликатов.

Для этой задачи мы можем использовать Python-совместимый способ удаления дубликатов с помощью преобразования в множество, затем обратно в список

def remove_duplicates(lst: list):
    if not isinstance(lst, list):
        raise ValueError("Входной параметр должен быть списком.")
    return list(set(lst))




3. Разворот связного списка с использованием рекурсии
Задача: Развернуть связный список используя рекурсию.

Мы создадим класс для представления узлов связного списка, а также функцию для его разворота.

class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def reverse_linked_list(head: ListNode) -> ListNode:
    if head is None or head.next is None:
        return head
    rest = reverse_linked_list(head.next)
    head.next.next = head
    head.next = None
    return rest

def linked_list_to_list(head: ListNode) -> list:
    result = []
    while head:
        result.append(head.value)
        head = head.next
    return result

def list_to_linked_list(lst: list) -> ListNode:
    if not lst:
        return None
    head = ListNode(lst[0])
    current = head
    for value in lst[1:]:
        current.next = ListNode(value)
        current = current.next
    return head
